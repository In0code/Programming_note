
쌍용 교육 강의 정리


2023년 6월 7일 첫 수업



<Java SE>

개발환경 설치 및 설정, 기본문법 ( 클래스의 구조, 변수, 연산자, 제어문),

method. OOP (클래스, String, Array, 상속, interface, abstrack class,

inner class ( inner class, nested class, local class, anonymous inner class)),

유용한 클래스들, JCF ( List, Set, Map ), JFC ( AWT, Swing), Event Handling,

Exception Handling, IO Stream, Network, Thread



-자바 개발 환경 배포

유료 : Oracle JDK (Java Development Kit) - 지속적인 관리 ( oracle.com)

무료: OpenJDK



-OpenJDK 설치 파일 다운

github에서 설치 파일을 제공 (gitjub.com -> ojdkbuild 검색)




-Java

: sun사에서 개발되어 1995년에 발표된 프로그래밍 언어

자바의 아버지 : James Gosling

ㄴ 소녀시대 팬





-Java의 실행

CUI (Character User Interface)에서 실행

: 키의 입력(명령어)으로 프로그램을 사용하는 환경

셜치된 프로그램(JDK)을 어떤 경로 (folder, directory)에서든 사용하기 위해 PATH(환경설정)를 설정해야 한다.


Prompt: 현재경로 보여주는 일

-> CUI는 프로그램이 설치된 directory에서만 프로그램을 실행할 수 있다

-> CUI는 프로그램이 설체된 directory가 아니라면 프로그램을 실행할 수 없다

-> 설치된 디렉토리가 아닌 다른 위체에서 프로그램을 실행하는 법 : PATH 설정


OS에서 설정 : 제어판 > 시스템 및 보안 > 시스템 > 고급 시스템 설정 > 환경 변수> 시스템 변수 > path

설정파일 (.bat 파일 생성)

-JDK가 설치 된 후 JDK에서 제공하는 실행 파일 (java.exe,,,)을 사용하기 위해 PATH를 설정한다

-XXX_HOME : 프로그램끼리 경로를 참조하여 사용할 때 설정하는 경로 (PATH)

-PATH : 설치된 프로그램을 어떤 경로에서든 사용할 때 설정하는 경로 (PATH)

-CLASSPATH : class파일 (bytecode)을 어떤 경로에서든 참조하고 사용할 때 설정하는 경로 (PATH)


set DEV_HOME=e:/dev

set JAVA_HOME=%DEV_HOME%/java-11-openjdk-11.0.15-1


set PATH=%JAVA_HOME%/bin


사용법)

환경 설정 파일을 로딩 (e:/dev/env.bat)

DOS창에서 프로그램을 사용 (java.exe, javac.exe등 사용)


javac // javacompile





-java 코딩 순서

소스 코드 작성

컴파일 (javac.exe)

실행 (java.exe)


1) Source code 작성

메모장, 범용에디터, IDE


구성:

class 클래스명{

코딩

}


주의 사항

-대소문자를 구분한다.

-문장(명령)에 끝에는 ; 을 붙인다.

-괄호는 반드시 짝으로 구성한다.


-High-level language : 사람의 언어로 코딩을 한다 (영어, 한글, 숫자) // Java, C/C++, Python,,,

-Low-level language : 컴퓨터의 언어로 코딩을 한다 (기계어) // COBOL, Assembly


2) 저장

: 클래스명.java


3) Compile

: 사람의 언어를 Computer의 언어로 번역하는 것

compiler가 필요 ( javac.exe)


-사용법

: javac 소스파일명.java

-> 성공 : bytecode 생성 ( 기계어로 만들어진 파일 )


4) Run ( bytecode를 사용하여 컴퓨터에게 일을 시킨다 )

사용법 : java bytecode명




대표사진 삭제
사진 설명을 입력하세요.

prompt : OS의 명령을 실행하거나 ( cd, mkdir, del,,,), 설치된 프로그램을 실행하는 일

Console : OS가 제공하는 추력영역 ( 프로그램을 실행할 수 없다,,OS명령을 실행할 수 없다)

cd : Change Directory


System.out.println("안녕"); // 안녕을 콘솔에 출력해라




대표사진 삭제
사진 설명을 입력하세요.



Java 실행




코딩의 목적 : 컴퓨터에게 일을 시키기 위해서





Compile time : bytecode 생산

클래스명은 첫글자를 대문자로 설정하는 낙타체를 사용한다


Runtime : 생산도니 bye

code를 실행 . 연산(CPU) 과 저장 (RAM)


CPU : 중앙 처리 장치, PATH (환경설정)을 해야 함

GPU : 더블클릭




자바의 장점>

WORA

: Write Once Run Anywhere

한번 만들어진 bytecode는 어떤 OS에서든 실행이 된다




자바 표준 출력 (Console 출력)

System.out 표준 출력 스트림을 사용하여 Console에 출력




대표사진 삭제
사진 설명을 입력하세요.

사용법:

System.out.println(); //출력 후 줄을 변경한다

System.out.print(); //출력 후 줄을 변경하지 않는다.


값 (arguments)

-상수: 변하지 않는 값

정수 상수 : 6, 2023

실수 상수 : 6.7 , 2023.6

블린 상수: true, false

문자 상수: 'A' , '0', '가'

문자열 상수: "안녕하세요", "오늘은 수요일", "문자열" 뒤에 +연산자는 붙임의 의미


-변수 (variable) : 변할 수 있는 값

기본형 데이터 형, 참조형 데이터 형으로 선언된 변수

프로그램에서 값을 일시적으로 저장하고 사용할 때


변수를 선언할 시점 : 데이터를 보관할 필요성이 있을 때

-> 캐멀(낙타) 스타일 :

자바 소스 파일명(클래스명)은 대문자로 시작하는 것이 관례 ex) ProductKind.java

변수명은 소문자로 시작하는 것이 관례 ex ) sportsCar


변수가 선언되었다면 값을 저장할 수 있는데, 이때 대입 연산자인 = 를 사용한다.

수학에서 등호(=)는 '같다'라는 의미이지만, 자바에서는 우측 값을 좌측 변수에 대입하는 연산자로 사용한다

ex)

int score; //변수 선언

score=90; //값 대입

=> 90을 score에 저장


-연산식: 연산자를 사용한 연산 결과가 출력

6+7을 입력하면 13이 출력



자바에서 + 연산자는 두 가지 기능을 가지고 있다

피연산자가 모두 숫자일 경우에는 덧셈 연산을 수행하고.

피연산자 중 하나가 문자열일 경우에는 나머지 피연산자도 문자열로 자동 변환된어 문자열 결합 연산을 수행한다.


앞에서 순차적으로 + 여산을 수행하지 않고 특정 부분을 우선 연산하고 싶다면 해당 부분을 괄호 () 로 감싸면 된다.

괄호는 항상 최우선으로 연산을 수행한다


ex)

String str = "1" + ( 2 + 3 ); // 15





Java 영역

java 영역은 {}로



대표사진 삭제
사진 설명을 입력하세요.







20203년 6월 8일



에러 (error)

-compile error, runtime error 두 가지로 발생

compile error : 문법 에러, 컴파일 시에 발생하는 에러

runtime error : 로직에러, 실행할 때 발생하는 에러



image.png
대표사진 삭제
사진 설명을 입력하세요.



지역변수의 초기화

초기화 하지 않은 변수를 직접 사용(출력, 연산, 재할당)하면 error가 발생한다


초기화 방법

: 데이터형 변수명 = 값;

값: default value (초기화 값)




image.png
대표사진 삭제
사진 설명을 입력하세요.





Comment (주석)

-소스코드 안에서 개발자가 코드의 설명을 부여하기 위해 정의하는 것.

-compiler( javac.exe )가 해석하지 않는다. => 코드의 실행을 막을 때 사용

-Java API Documentation을 작성할 때 사용 => api는 java에서 제공하는 설명서


사용)

-한줄 주석 //

: 부연 설명이 짧거나, 코드 한 줄의 실행을 막을 때 사용

ex) //주석으로 설정할 내용


-여러 줄 주석 /* */

: 부연 설명이 길거나, 코드 여러 줄의 실행을 막을 때 사용

ex)

/*

주석으로

설정할 내용

*/


-API주석 /** */

API문서를 생성할 때 사용. (클래스 위와 method 위에서만 정의)

ex)

/**

API문서에 들어갈 내용

*/






DataType (데이터 형)

값을 저장하기 위해 저장할 값의 종류에 따라 이름을 부여해 놓은 것

기본형 데이터 형, 참조형 데이터 형 두 가지를 제공

기본형 데이터형 : 변수 자체에 값을 저장하는 데이터 형

-> byte, short, int, long, char, float, double, boolean

참조형 데이터형 : 값은 메모리에 다른 곳에 저장되고 그 시작 주소를 저장하는 데이터 형

-> class , String, array


데이터형은 그릇의 크기라고 생각하면 됨.

값을 저장하기 위해서 이름표를 붙여서 만들어 둔 통임

적적한 값을 저장해야함



image.png
대표사진 삭제
사진 설명을 입력하세요.



primitive type (기본형 데이터형)

-정수

byte : 1byte / -128 ~127

short : 2byte / -32768 ~ 32767

int : 4byte / -21억 ~ 21억

long : 8byte


-문자

char

- 2byte / 'A' , '가'

저장되는 값은 unicode 값으로 저장 / 65는 A의 unicode 값

ex)

char c1 = 'A'; //같은

char c2 = '65'; //값임


-실수

float : 4byte / 유효연산 7자리

double : 8byte / 유효연산 15자리


-블린

boolean : 1byte / true , false



image.png
대표사진 삭제
사진 설명을 입력하세요.


bit는 0과 1이 저장되는 단위

0은 양수 1은 음수


코드에서 프로그래머가 직접 입력한 값을 리터럴(literal)이라고 부르는데, 변수에 대입할 정수 리터럴은 진수에 따라 작성하는 방법이 다르다.




literal

:코딩 창에서 상수를 사용하면, 상수가 저장되는 메모리 공간

literal은 이름이 없고 ,리터럴에 있는 값이 변수에 할당이 된다

정수 literal은 4byte, 실수 literal은 8byte이다.


int i=10;

상수를 사용하고, 프로그램이 실행되면 상수는 메모리에 저장된다 => literal

literal에 저장된 값이 변수에 할당된다

등가 (리터럴에 선언 된 값이 변수에 할당 되려면 리터럴의 형과 변수의 데이터형이 같아야 한다)



image.png
대표사진 삭제
사진 설명을 입력하세요.

long apartmentCosts=5400000000; //error

error이유: 정수를 사용하면 4byte의 literal에 값을 저장하려고 하는데, 4byte(int)의 저장범위는 21억이므로

literal에 저장되지 않고 error가 발생하게 된다.

=> 형명시를 해야함.



형명시

리터럴의 크기를 일시적으로 변경하는 것

-정수 : L이나 l을 상수 뒤에 붙여 리터럴의 크기를 4byte에서 8byte로 늘린다


ex)

long calue-214783648L;

-> 4byte의 literal이 8byte로 확장되어 값이 저장되고, 변수에 할당된다.


실수 형명시 (F, f, D, d)

실수 상수를 사용하면 8byte(double)의 literal에 값이 저장된다


float f=6.08; // error

-> 8byte의 크기를 가진 literal이 4byte인 float형에 할당될 수 없다.

8byte의 literal을 4byte로 주이기 위해 F, f의 형명시를 제공한다


ex)

float f=6.08F; //8byte의 리터럴이 4byte로 줄어들고 변수에 할당된다.


image.png
대표사진 삭제
사진 설명을 입력하세요.




Promotion (자동 형 변환)

Java가 상황에 따라 데이터 형을 변경하는 것.

변수에 값을 할당하거나, 연산할 때 자동 형 변환이 발생한다

promotion, demotion이 존재



image.png
대표사진 삭제
사진 설명을 입력하세요.

큰 허용 번위 타입 = 작은 허용범위 타입

자동 타입 변환


자동 타입 볌환은 값의 허용 범위가 작은 타입이 허용 범위가 큰 타입으로 대입될 때 발생한다.


-변수의 할당)

byte b=10; //literal이 1byte로 줄어들어 할당된다 (demotion)


-연산)

int의 하위 데이터형이 연산되면 결과는 int로 발생한다 (promtion)


image.png
대표사진 삭제
사진 설명을 입력하세요.

예외)

char타입보다 허용 범위가 작은 byte타입은 char 타입으로 자동 변환될 수 없다.

왜나하면 char타입의 허용 범위는 음수를 포함하지 않는데, byte타입은 음수를 포함하기 때문이다.




Casting (강제 형 변환)

큰 허용 범위 타입은 작은 허용 범위 타입으로 자동 타입 변환될 수 없다.

마치 큰 그릇을 작은 그릇 안에 넣을 수 없는 것과 동일한 이치이다.

하지만 큰 그릇을 작은 그릇 단위로 쪼개어서 한 조각만 작은 그릇에 넣는 것은 가능하다.

이를 강제 타입 변환(Casting)이라고 한다.


개발자가 필요한 데이터 형으로 일시적으로 변환을 하는 것

값 손실이 발생할 수 있다

기본형에서 참조형으로, 참조형에서 기본으로는 강제 형 변환이 되지 않는다.

boolean은 강제 형 변환이 되지 않는다.


큰


(변환할 데이터형)값


ex)

double d=4.7;

int i=d; //error , 8byte의 실수형을 4byte의 정수형으로 할당할 수 없다

=> casting

int i=(int)d; //8byte의 double형이 4byte의 int형으로 변환 된 후 (값 손실 발생) 변수에 할당한다.


image.png
대표사진 삭제
사진 설명을 입력하세요.


작은 허용 범위 타입 = (작은 허용 범위 타입) 큰 허용 범위 타입

강제 타입 변환


image.png
대표사진 삭제
사진 설명을 입력하세요.



숙제


image.png
대표사진 삭제
사진 설명을 입력하세요.

class Work0608{


public static void main(String[] args) {


/*출력 1.

내 이름은 홍길동이고 이니셜은 H G D 입니다.

태어난 해 는 xxxx년으로 나이는 xx 살입니다.*/


String name="김인영";

char initial1 ='K';

char initial2 ='I';

char initial3 ='Y';

int yearOfBirth=1999;

int thisYear=2023;

int age=thisYear-yearOfBirth;


System.out.println("내 이름은 " +name+"이고 이니셜은 "

+initial1+initial2+initial3+"입니다. 태어난 해는 "+ yearOfBirth+"년으로 나이는 "+age+"살입니다.");


/*출력 2.

왼눈 시력 xx.x 오른 눈 시력 xx.x 양안시력 xx.x 입니다.*/

double lefteye=10.4;

double righteye=10.6;

double botheye=(lefteye+righteye)/2;


System.out.println("왼눈 시력 "+lefteye+" 오른눈 시력 "+righteye+" 양안시력 "+botheye+"입니다.");


/*출력3.

편도 차비 xx원 왕복차비 xx 원 입니다. 한달 20일 출근을 하면

월 교통비는 총 xx원 입니다.*/


int oneWayFare=1350;

int twoWayFare= oneWayFare*2;

int oneMonthFare=twoWayFare*20;


System.out.println("편도 차비 "+oneWayFare+"원 왕복차비 "+twoWayFare+" 원 입니다. 한달 20일 출근을 하면 월 교통비는 총"+oneMonthFare+"원 입니다.");



/*출력 4.

대문자 ‘A’의 코드 값은 65 입니다. A+32를 하면 소문자 ‘a’를 만들 수 있습니다.*/


char capitalLetter='A';

int codeValue=(char)capitalLetter;

int smallLetter=capitalLetter+32;

char a=(char)smallLetter;


System.out.println("대문자 '"+capitalLetter+"'의 코드 값은"+codeValue+"입니다. A+32를 하면 소문자'"+a+"'를 만들 수 있습니다");


}

}








2023년 6월 9일


Constant

-변수(변하는 수, 가독성 향상)를 상수(변하지 않는 수, 가독성 저하)처럼 사용할 때 사용

-> 가독성(코딩할 때 기준값으로 사용)을 향상시키면서, 값을 변경하지 못하도록 만들기

-class field( instanace varibale, class variable, Constant, method)에만 정의 가능

-Constant 를 정의한 클래스 또는 외부 클래스에서도 사용할 수 있다.


image.png
대표사진 삭제
사진 설명을 입력하세요.


-API에서는 field로 찾아 볼 수 있다.

작성법)

public static final 데이터형 상수명=값;

(상수명은 거의 대부분 대문자와 _ 로 구성) => ex) MAX_VALUE


image.png
대표사진 삭제
사진 설명을 입력하세요.

-사용

클래스 안에 선언한 Constant )

상수명 ex) MAX_VALUE

클래스명.상수명 ex) Byte.MAX_VALUE


다른 클래스가 가지고 있는 Constant )

클래스명.상수명 ex) Byte.MAX_VALUE


image.png
대표사진 삭제
사진 설명을 입력하세요.



Java API 문서


image.png
대표사진 삭제
사진 설명을 입력하세요.


Wrapper class

기본형 데이터형과 같은 이름을 가진 클래스

(자바에서는 데이터형과 같은 이름의 클래스를 제공한다)

기본형 데이터형을 감싸서 객체로 생성한 후 다양한 기능을 사용하기 위해


래퍼 클래스란 (Wrapper class)?

자바의 자료형은 크게 기본타입과 참조타입으로 나누어진다. 대표적으로 기본 타입은 char, int, float, double, boolen등이 있고 참조 타입은 class, interface 등이 있는데 프로그래밍을 하다 보면 기본 타입의 데이터를 객체로 표현해야하는 경우가 종종 있다. 이럴 때에 기본 자료타입을 객체로 다루기 위해서 사용하는 클래스들을 래퍼 클래스(wrapper class)라고 한다. 자바는 모든 기본타입은 값을 갖는 객체를 생성할 수 있다. 이런 객체를 포장 객체라고도 하는데 그 이유는 기본 타입의 값을 내부에 두고 포장하기 때문. 래퍼 클래스로 감싸고 있는 기본 타입 값은 외부에서 변경할 수 없다. 만약 값을 변경하고 싶다면 새로운 포장 객체를 만들어야 한다.



image.png
대표사진 삭제
사진 설명을 입력하세요.

래퍼 클래스는 java.lang 패키지에 포함되어 있는데, 다음과 같이 기본 타입에 대응되는 래퍼 클래스들이 있다. char타입과 int타입이 각각 character와 Integer의 래퍼 클래스를 가지고 있고 나머지는 기본 타입의 첫 글자를 대문자로 바꾼 이름을 가지고 있다.




Operator (연산자)

연산에 사용되는 예약된 부호들

연사자의 우선 순위 -> 최 단산쉬 관리 삼대 콤마


image.png
대표사진 삭제
사진 설명을 입력하세요.

최우선

()

2. 단항

~, !, +, -, ++, --

3. 산술

+, -, *, /, %

4. 쉬프트

<< , >>, >>>

5. 관계

> , < , >=, <=, ==, !=

6. 논리

일반논리 &&, ||

비트 논리 &, |, ^

7. 삼항(조건)

? , :

8. 대입

=

+=, -=, *=, /=, %=

<<=, >>=, >>>=

&=, |=, ^=



Radix (진수)

서로 다른 모양의 숫자 몇 개를 가지고 모든 수를 표현

코딩 시에는 10진수, 8진수, 16진수를 사용할 수 있다.


image.png
대표사진 삭제
사진 설명을 입력하세요.


코딩창에서 사용하는 법

10진수 : 숫자

8진수 : 0숫자

16진수 : 0x숫자

2진수 : 0b숫자


-10진수 (decimal), 8진수 (octal), 16진수 (hax), 2진수 (binary)



10진수 (decimal)

소수점이 없는 0~9 숫자로 작성

0 1 2 3 4 5 6 7 8 9 10(일영) 11(일일)....

코딩 창에서 숫자로 표현

ex) int x=12;


8진수 (octal)

0으로 시작하고 0~7 숫자로 작성

0 1 2 3 4 5 6 7 10(일영) 11(일일)....

코딩창에서 0숫자로 표현

ex) int x= 013; // 10진수 값= 1*(8의 1승) + 3*(8의 0승) =11 -> 책 41p 참고


16진수 (hax)

0x또는 0X로 시작하고 0~9 숫자나 A, B, C, D, E, F 또는 a, b, c, d ,e ,f로 작성

0 1 2 3 4 5 6 7 8 9 A B C D E F 10(일영) 11(일일)....

코딩창에서 0x숫자로 표현

ex) int x= 0xB3; // 10진수 값 = 11*(16의 1승) + 3*(16의 0승) = 179


2진수 (binary)

0b또는 0B로 시작하고 0과 1로 작성

코딩창에서 0b숫자로 표현

ex) 0b1011; // 10진수 값 = 1*(2의3승) + 0*(2의2승) + 1*(2의1승) + 1*(2의0승) = 11



image.png
대표사진 삭제
사진 설명을 입력하세요.

ex) 0x1365 => 10진수 값 = 1*(16의 3승) + 3*(16의 2승) + 6*(16의1승) + 5*(16의0승) = ...


뭐의 0승은 1이다.


image.png
대표사진 삭제
사진 설명을 입력하세요.



image.png
대표사진 삭제
사진 설명을 입력하세요.



image.png
대표사진 삭제
사진 설명을 입력하세요.


image.png
대표사진 삭제
사진 설명을 입력하세요.

최상위 부호 비트가 0이면 양수, 1이면 음수





... 1024 512 256 ] / [ 128 64 32 16 8 4 2 1 ] : 2진수




8진수를 2진수로 변환

: 숫자 하나를 점자 4 2 1 인 비트로 변환하여 2진수로 기록. 1byte로 비어있는 값을 0으로 채운다.



image.png
대표사진 삭제
사진 설명을 입력하세요.


8진수 [ 4 2 1 ] / [ 4 2 1 ] 2진수 10진수

52 => 010 010 => 0010 1010 => 42

61 => 110 001 => 0011 0001 => 49


16진수를 2진수 변환

:숫자 하나를 점자 8 4 2 1을 사용하는 2진수로 변환


image.png
대표사진 삭제
사진 설명을 입력하세요.


16진수 [ 8 4 2 1 ] / [ 8 4 2 1 ] 10진수

2a => 0010 1010 => 42

ff => 1111 1111 => 255

201 => 0010 0000 0001 => 513


2진수 음수 표현

보수법을 사용


image.png
대표사진 삭제
사진 설명을 입력하세요.


단항연산자 (unary)

연산에 필요한 항이 하나인 연산자

~ ,!, +, -, ++, --


사용법)

연산자 대상체;


image.png
대표사진 삭제
사진 설명을 입력하세요.



~ : tilde //1의 보수 연산

사용법)

~10 => -11

~ -9 => 8


~양수 : 부호 변경 1증가

~음수 : 부호 변경 1감소


image.png
대표사진 삭제
사진 설명을 입력하세요.



! : not

true => false

flase => ture


ex)

!(3 < 4) // false


image.png
대표사진 삭제
사진 설명을 입력하세요.




- : 부호 변경연산

2의 보수 연산(값은 그대로 부호만 변경)

ex)

2023 (양수2023) => -를 붙이면 음수의 2023


image.png
대표사진 삭제
사진 설명을 입력하세요.




+ : 형식적 제공

ex)

+9 => 9

+-9 => -9


image.png
대표사진 삭제
사진 설명을 입력하세요.




image.png
대표사진 삭제
사진 설명을 입력하세요.

++ : 증가연산

-- :감소연산

변수에만 사용할 수 있다

대상체의 값을 1씩 증가시키거나, 대상체의 값을 1씩 감소시키는 일


사용법)

전위 연산 : 연산자 대상체;

대상체 연산자; :후위연산


증감 연산자는 변수의 값을 1증가시키거나 1 감소시키는 연산자이다

변수 단독으로 증감 연산자가 사용될 경우에는 변수의 앞뒤 어디에든 붙어도 결과는 동일하다


ex)

++i; 와 i++; 은 모두 i=i+1로 동일

--i; 와 i--; 모두 i=i-1로 동일


하지만 여러 개의 연산자가 포함되어 있는 연산식에서는 증감 연산자의 위치에 따라 결과가 달라진다.

증감 연산자가 변수 앞에 있으면 우선 변수를 1증가 또는 1 감소시킨 후에 다른 연산을 수행한다.

증감 연산자가 변수 뒤에 있으면 모든 연산을 끝낸 후에 변산을 1증가 또는 1감소시킨다.


대입연산자(method에 값으로 할당하는)와 같이 사용하면 전위와 후위가 다른 값을 대입해준다.

전위: 내 것 먼저 (증가나 감소연산 후 대입)

후휘: 남의 것 먼저 (대입 후 증가나 감소 연산을 수행)




image.png
대표사진 삭제
사진 설명을 입력하세요.


산술연산자 - 가장 직관적으로 알 수 있는 연산자

+ ,-, *, /, %(나머지)


사용법)

대상체 연산자 대상체


산술 연산의 특징

-피연산자가 정수 타입(byte, short, char, int)이면 연산의 결과는 int타입이다.

-피연산자가 정수 타입이고 그 중 하나가 long 티입이면 연산의 결과는 long타입이다.

-피연산자 중 하나가 실수 타입이면 연산의 결과는 실수 타입이다.



쉬프트 연산 (비트밀기 연산)

비트를 좌측 또는 우측으로 밀어서 이동시키는 연산을 수행

<< , >> , >>>


a << b

: 정수 a의 각 비트를 b만큼 왼쪽으로 이동

오른쪽 빈자리는 (항상) 0으로 채움

a * (2의 b승)와 동일한 결과가 됨


a >> b

: 정수 a의 각 비트를 b만큼 오른쪽으로 이동

왼쪽 빈자리는 최상위 부호 비트와 같은 값으로 채움 (양수면 0으로 채우고, 음수면 1로 채운다.


a >>> b

: 정수 a의 각 비트를 b만큼 오른쪽으로 이동

왼쪽 빈자리는 (항상) 0으로 채운다.



image.png
대표사진 삭제
사진 설명을 입력하세요.




image.png
대표사진 삭제
사진 설명을 입력하세요.



숙제


image.png
대표사진 삭제
사진 설명을 입력하세요.


class Work0609 {


public static final int MONTH_MONEY=300000;

public static final int DAY=20;


public static void main(String[] args) {


/*출력.

1. 한달 용돈은 xxxx원 하루 용돈은 20일 기준으로 xxx 원입니다.

하루 사용 비용은 편도 교통비 xxx원 왕복교통비 xx원 점심식대 xxx원으로

총 xxx 원 입니다.

한달이 지나면 남은 금액 xx원 입니다. */


int oneDayMoney=MONTH_MONEY/DAY;

int oneWayTransCoast=1350;

int twoWayTransCoast=oneWayTransCoast*2;

int lunchCoast=5000;

int oneDayCoast=twoWayTransCoast+lunchCoast;

int remainingAmount= (oneDayMoney-oneDayCoast)*DAY;


System.out.println("한달 용돈은 "+MONTH_MONEY+"원 하루 용돈은 "+

DAY+"일 기준으로 "+oneDayMoney+"원 입니다.\n"+

"하루 사용 비용은 편도 교통비 "+oneWayTransCoast+"원 왕복 교통비 "+

twoWayTransCoast+"원 점심식대 "+lunchCoast+"원으로 총 "+

oneDayCoast+"원 입니다.\n\n한달이 지나면 남는 금액"+

remainingAmount+"원 입니다.");



/*2. API에서 기본형 데이터 형에 대한 Wrapper class를 찾아보고,

최대값과 최소값을 가지고 있는 Constant가 존재한다면

아래와 같이 출력해 보세요.*/


System.out.println("byte의 최소값 "+Byte.MIN_VALUE+" 최대값 "+Byte.MAX_VALUE+" short의 최소값 " +Short.MIN_VALUE+" 최대값 "+Short.MAX_VALUE);


/*출력 예)

byte의 최소값 -128 최대값 127

short의 최소값 -32768 최대값 32767*/



}

}





﻿